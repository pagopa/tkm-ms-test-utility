# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - hotfix/*
pr: none

variables:
  dockerfileRelativePath: 'Dockerfile'

  # Agent VM image name for Build
  vmImageNameDefault: 'ubuntu-latest'

  # Image Repository Name
  imageRepository: 'tkmmstestutility'

  isToDeploy: $[ne(variables['Build.Reason'], 'PullRequest')]
  isSIT: $[eq(variables['Build.SourceBranch'], 'refs/heads/release/sit')]

  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release/sit') }}:
    dockerRegistryServiceConnection: 'tkm-cstaruatregistry-connector'
    containerRegistry: 'cstaruatregistry.azurecr.io'
    enviroment: sit
    imagePullSecret: 'tkmsitregistry-auth'
  ${{ if and(not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release')), ne(variables['Build.SourceBranch'], 'refs/heads/master'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix'))) }}:
    dockerRegistryServiceConnection: ''
    enviroment: sit

  maven_cache_folder: $(Pipeline.Workspace)/.m2/repository

stages:
  - stage: Test_Develop_Release
    displayName: Test Develop and Prepare Release
    condition: or(eq(variables.isPullRequest, true), and(ne(variables.isSIT, true), ne(variables.isUAT, true), ne(variables.isPROD, true)))
    jobs:
      - job: Test
        displayName: Test
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Cache@2
            displayName: Cache Maven
            inputs:
              key: 'maven | "$(Agent.OS)" | tkmtestutility'
              restoreKeys: |
                maven | "$(Agent.OS)" | tkmtestutility
                maven | "$(Agent.OS)"
                maven
              path: $(maven_cache_folder)
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'
              options: '-B -s $(settingsxml.secureFilePath) -T1C -Dmaven.repo.local=$(maven_cache_folder)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false

      - job: Release
        displayName: Prepare release
        dependsOn: Test
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - checkout: self
            persistCredentials: true
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Cache@2
            displayName: Cache Maven
            inputs:
              key: 'maven | "$(Agent.OS)" | tkmtestutility'
              restoreKeys: |
                maven | "$(Agent.OS)" | tkmtestutility
                maven | "$(Agent.OS)"
                maven
              path: $(maven_cache_folder)

          - task: Bash@3
            displayName: Git config
            name: setgitconfig
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "tkm_build_service"
              failOnStderr: true

          - task: Bash@3
            displayName: Git checkout
            name: gitcheckout
            inputs:
              targetType: 'inline'
              script: |
                git checkout -q ${{ variables['Build.SourceBranchName'] }}
              failOnStderr: true

          - task: Bash@3
            displayName: Get release version
            name: getreleaseversion
            inputs:
              targetType: 'inline'
              script: |
                releaseVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s $(settingsxml.secureFilePath))
                releaseVersion=${releaseVersion/-SNAPSHOT/}
                echo "##vso[task.setvariable variable=version;isOutput=true]$releaseVersion"
                echo "Current Release Version ${releaseVersion}"
              failOnStderr: true

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'release:clean release:prepare '
              options: '--batch-mode -DscmCommentPrefix="[skip ci]" -s $(settingsxml.secureFilePath) -T1C -Darguments=-DskipTests -Dmaven.repo.local=$(maven_cache_folder)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false

          - task: Bash@3
            displayName: Git push on develop branch
            name: gitpushdev
            inputs:
              targetType: 'inline'
              script: |
                git push -q origin ${{ variables['Build.SourceBranchName'] }}
              failOnStderr: true

          - task: Bash@3
            displayName: Git push on tag
            name: gitpushtag
            inputs:
              targetType: 'inline'
              script: |
                git push -q origin --tags
              failOnStderr: true

          - task: Bash@3
            displayName: Git create tmp branch
            name: gitcreatetmp
            inputs:
              targetType: 'inline'
              script: |
                git checkout -q -b tmp/$(getreleaseversion.version) test-utility-$(getreleaseversion.version)
              failOnStderr: true

          - task: Bash@3
            displayName: Git push on tmp branch
            name: gitpushtmp
            inputs:
              targetType: 'inline'
              script: |
                git push -q --set-upstream origin tmp/$(getreleaseversion.version)

  - stage: POM
    displayName: POM
    condition: and(eq(variables.isToDeploy, true),or(eq(variables.isSIT, true),eq(variables.isUAT, true),eq(variables.isPROD, true)))
    jobs:
      - job: POM
        displayName: POM
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            condition:  eq(variables.isToDeploy, true)
            inputs:
              targetType: 'inline'
              script: |
                version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s $(settingsxml.secureFilePath))
                echo "##vso[task.setvariable variable=outputpomversion;isOutput=true]$version"
                echo "Current Project Version ${version}"
              failOnStderr: true

  - stage: SIT
    displayName: SIT
    dependsOn: POM
    condition: and(eq(variables.isToDeploy, true), eq(variables.isSIT, true))
    variables:
      pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings_v2.xml'
              retryCount: '2'
          - task: Cache@2
            displayName: Cache Maven
            inputs:
              key: 'maven | "$(Agent.OS)" | tkmtestutility'
              restoreKeys: |
                maven | "$(Agent.OS)" | tkmtestutility
                maven | "$(Agent.OS)"
                maven
              path: $(maven_cache_folder)
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'deploy'
              options: '-B -s $(settingsxml.secureFilePath) -DskipTests=false -Dmaven.repo.local=$(maven_cache_folder)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact target'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/target'
              artifact: 'target'
              publishLocation: 'pipeline'

      - job: Push
        displayName: Push
        dependsOn: Build
        condition: succeeded()
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'target'
              targetPath: '$(Pipeline.Workspace)/target'
          - task: Bash@3
            displayName: PrintInfo
            name: PrintInfo
            inputs:
              targetType: 'inline'
              script: |
                echo "$(dockerRegistryServiceConnection)"
                echo "$(imageRepository)"
              failOnStderr: true
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Pipeline.Workspace)'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion)

      - deployment: Deploy
        displayName: Deploy
        dependsOn: Push
        condition: and(succeeded(), eq(variables.isToDeploy, true), eq(variables.isSIT, true))
        pool:
          name: uat_agent_pool
        environment: 'sit'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: 'Create Namespace'
                  inputs:
                    namespace: tkm-sit
                    action: deploy
                    kubernetesServiceConnection: 'ddsakstest-self-connection-tkm-sit'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/namespace-$(enviroment).yml
                - template: 'templates/env-configurations-test-utility.yml'
                  parameters:
                    azureSubscription: 'TKM-Subscription-sit'
                    KeyVaultName: 'kmn-tkm-pagopa-test'
                    secretName: 'tkm-test-utility-kv-store-creds-sit'
                    spcClassName: 'tkm-test-utility-spc-sit'
                    env: 'sit'
                    kubernetesServiceConnection: 'ddsakstest-self-connection-tkm-sit'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    namespace: tkm-sit
                    action: deploy
                    kubernetesServiceConnection: 'ddsakstest-self-connection-tkm-sit'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-$(enviroment).yml
                      $(Pipeline.Workspace)/manifests/service-$(enviroment).yml
                      $(Pipeline.Workspace)/manifests/ingress-$(enviroment).yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(pomversion)